// Code generated by MockGen. DO NOT EDIT.
// Source: models/users.go

// Package mock_models is a generated GoMock package.
package mock_models

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/vinhut/gapura/models"
	reflect "reflect"
)

// MockUserDatabase is a mock of UserDatabase interface
type MockUserDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockUserDatabaseMockRecorder
}

// MockUserDatabaseMockRecorder is the mock recorder for MockUserDatabase
type MockUserDatabaseMockRecorder struct {
	mock *MockUserDatabase
}

// NewMockUserDatabase creates a new mock instance
func NewMockUserDatabase(ctrl *gomock.Controller) *MockUserDatabase {
	mock := &MockUserDatabase{ctrl: ctrl}
	mock.recorder = &MockUserDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserDatabase) EXPECT() *MockUserDatabaseMockRecorder {
	return m.recorder
}

// Find mocks base method
func (m *MockUserDatabase) Find(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Find indicates an expected call of Find
func (mr *MockUserDatabaseMockRecorder) Find(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserDatabase)(nil).Find), arg0, arg1, arg2)
}

// FindByUid mocks base method
func (m *MockUserDatabase) FindByUid(arg0, arg1 string, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByUid", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// FindByUid indicates an expected call of FindByUid
func (mr *MockUserDatabaseMockRecorder) FindByUid(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByUid", reflect.TypeOf((*MockUserDatabase)(nil).FindByUid), arg0, arg1, arg2)
}

// Create mocks base method
func (m *MockUserDatabase) Create(arg0 *models.User) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockUserDatabaseMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserDatabase)(nil).Create), arg0)
}

// Update mocks base method
func (m *MockUserDatabase) Update() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockUserDatabaseMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserDatabase)(nil).Update))
}

// Delete mocks base method
func (m *MockUserDatabase) Delete(arg0 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockUserDatabaseMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUserDatabase)(nil).Delete), arg0)
}

// IncrementPost mocks base method
func (m *MockUserDatabase) IncrementPost(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementPost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementPost indicates an expected call of IncrementPost
func (mr *MockUserDatabaseMockRecorder) IncrementPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementPost", reflect.TypeOf((*MockUserDatabase)(nil).IncrementPost), arg0)
}

// DecrementPost mocks base method
func (m *MockUserDatabase) DecrementPost(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementPost", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementPost indicates an expected call of DecrementPost
func (mr *MockUserDatabaseMockRecorder) DecrementPost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementPost", reflect.TypeOf((*MockUserDatabase)(nil).DecrementPost), arg0)
}

// IncrementLike mocks base method
func (m *MockUserDatabase) IncrementLike(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementLike", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementLike indicates an expected call of IncrementLike
func (mr *MockUserDatabaseMockRecorder) IncrementLike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementLike", reflect.TypeOf((*MockUserDatabase)(nil).IncrementLike), arg0)
}

// DecrementLike mocks base method
func (m *MockUserDatabase) DecrementLike(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementLike", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementLike indicates an expected call of DecrementLike
func (mr *MockUserDatabaseMockRecorder) DecrementLike(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementLike", reflect.TypeOf((*MockUserDatabase)(nil).DecrementLike), arg0)
}

// IncrementFollowing mocks base method
func (m *MockUserDatabase) IncrementFollowing(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFollowing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementFollowing indicates an expected call of IncrementFollowing
func (mr *MockUserDatabaseMockRecorder) IncrementFollowing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFollowing", reflect.TypeOf((*MockUserDatabase)(nil).IncrementFollowing), arg0)
}

// DecrementFollowing mocks base method
func (m *MockUserDatabase) DecrementFollowing(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementFollowing", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementFollowing indicates an expected call of DecrementFollowing
func (mr *MockUserDatabaseMockRecorder) DecrementFollowing(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementFollowing", reflect.TypeOf((*MockUserDatabase)(nil).DecrementFollowing), arg0)
}

// IncrementFollower mocks base method
func (m *MockUserDatabase) IncrementFollower(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncrementFollower", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncrementFollower indicates an expected call of IncrementFollower
func (mr *MockUserDatabaseMockRecorder) IncrementFollower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementFollower", reflect.TypeOf((*MockUserDatabase)(nil).IncrementFollower), arg0)
}

// DecrementFollower mocks base method
func (m *MockUserDatabase) DecrementFollower(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecrementFollower", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DecrementFollower indicates an expected call of DecrementFollower
func (mr *MockUserDatabaseMockRecorder) DecrementFollower(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecrementFollower", reflect.TypeOf((*MockUserDatabase)(nil).DecrementFollower), arg0)
}
